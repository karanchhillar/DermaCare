To build a simple React website system based on the provided API calls, you can follow this basic system design outline. This design includes user authentication, user profile management, image upload, disease information search, and a simple user interface. Please note that this is a high-level design, and you'll need to implement the specific components and styling according to your preferences.

**React Components:**

1. **App Component**: This is the root component that manages routing and global state.

2. **Header Component**: Displayed at the top of every page, it can include navigation links and user authentication status.

3. **Registration Component**: Allows users to register with the system, including fields for username, email, password, date of birth, gender, and profile picture upload.

4. **Login Component**: Allows registered users to log in using their email and password.

5. **Dashboard Component**: The main user dashboard after logging in, displaying user information, uploaded images, and options to upload images and search for disease information.

6. **ImageUpload Component**: A form to upload images, including a file input and a submit button.

7. **DiseaseSearch Component**: A form to search for disease information, including a text input for the disease name and a submit button.

8. **UserProfile Component**: Displays user profile information, including username, email, date of birth, gender, and profile picture.

9. **ImageHistory Component**: Displays a list of images uploaded by the user.

10. **DiseaseInfo Component**: Displays information about a specific disease, including key points, common symptoms, causes and risk factors, treatment options, and research findings.

**React Router Configuration:**

- Configure React Router to handle navigation between different components and routes (e.g., `/`, `/login`, `/register`, `/dashboard`, `/profile`, `/image-history`, `/disease-info`).

**State Management:**

- Use React Context or a state management library like Redux to manage user authentication and global app state.

**API Integration:**

- Use Axios or the built-in `fetch` API to make API requests to your server for user registration, login, image upload, disease information search, user profile retrieval, and image history retrieval.

**Authentication:**

- Implement user authentication using JWT tokens. Store the token in a secure cookie on the client side.

**User Interface:**

- Create user-friendly forms for registration, login, and image upload.
- Display user profile information and uploaded images.
- Show disease information in a structured format.
- Use CSS or a styling library like Bootstrap to style the components and create a responsive design.

**File Upload Handling:**

- Use a library like `react-dropzone` for handling image uploads and displaying previews.

**Error Handling:**

- Implement error handling for API requests and form submissions, displaying appropriate error messages to the user.

**Logout:**

- Provide a logout feature that clears the JWT token cookie.

**Optional Enhancements:**

- Implement password reset functionality.
- Add user profile editing.
- Implement pagination for image history and disease information results.
- Use a front-end routing library like `react-router-dom` for better navigation.

Remember to install the necessary dependencies, set up your React project, and connect it to the server's APIs. You'll also need to secure your API endpoints and handle validation and error cases on both the client and server sides.